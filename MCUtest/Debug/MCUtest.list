
MCUtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001198  08001198  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001198  08001198  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001198  08001198  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001198  08001198  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001198  08001198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800119c  0800119c  0001119c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080011a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080011a4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080011a4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003347  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000be7  00000000  00000000  000233b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004d8  00000000  00000000  00023fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000391  00000000  00000000  00024478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a420  00000000  00000000  00024809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000398b  00000000  00000000  0002ec29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0003765c  00000000  00000000  000325b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001098  00000000  00000000  00069c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0006aca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001180 	.word	0x08001180

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001180 	.word	0x08001180

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b7f      	cmp	r3, #127	; 0x7f
 8000234:	d828      	bhi.n	8000288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000236:	4a2f      	ldr	r2, [pc, #188]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b25b      	sxtb	r3, r3
 800023e:	089b      	lsrs	r3, r3, #2
 8000240:	33c0      	adds	r3, #192	; 0xc0
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	589b      	ldr	r3, [r3, r2]
 8000246:	1dfa      	adds	r2, r7, #7
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	0011      	movs	r1, r2
 800024c:	2203      	movs	r2, #3
 800024e:	400a      	ands	r2, r1
 8000250:	00d2      	lsls	r2, r2, #3
 8000252:	21ff      	movs	r1, #255	; 0xff
 8000254:	4091      	lsls	r1, r2
 8000256:	000a      	movs	r2, r1
 8000258:	43d2      	mvns	r2, r2
 800025a:	401a      	ands	r2, r3
 800025c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	019b      	lsls	r3, r3, #6
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	401a      	ands	r2, r3
 8000266:	1dfb      	adds	r3, r7, #7
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	0018      	movs	r0, r3
 800026c:	2303      	movs	r3, #3
 800026e:	4003      	ands	r3, r0
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000274:	481f      	ldr	r0, [pc, #124]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	b25b      	sxtb	r3, r3
 800027c:	089b      	lsrs	r3, r3, #2
 800027e:	430a      	orrs	r2, r1
 8000280:	33c0      	adds	r3, #192	; 0xc0
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000286:	e031      	b.n	80002ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000288:	4a1b      	ldr	r2, [pc, #108]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	0019      	movs	r1, r3
 8000290:	230f      	movs	r3, #15
 8000292:	400b      	ands	r3, r1
 8000294:	3b08      	subs	r3, #8
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	3306      	adds	r3, #6
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	18d3      	adds	r3, r2, r3
 800029e:	3304      	adds	r3, #4
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1dfa      	adds	r2, r7, #7
 80002a4:	7812      	ldrb	r2, [r2, #0]
 80002a6:	0011      	movs	r1, r2
 80002a8:	2203      	movs	r2, #3
 80002aa:	400a      	ands	r2, r1
 80002ac:	00d2      	lsls	r2, r2, #3
 80002ae:	21ff      	movs	r1, #255	; 0xff
 80002b0:	4091      	lsls	r1, r2
 80002b2:	000a      	movs	r2, r1
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	401a      	ands	r2, r3
 80002b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	019b      	lsls	r3, r3, #6
 80002be:	22ff      	movs	r2, #255	; 0xff
 80002c0:	401a      	ands	r2, r3
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	0018      	movs	r0, r3
 80002c8:	2303      	movs	r3, #3
 80002ca:	4003      	ands	r3, r0
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	4809      	ldr	r0, [pc, #36]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	001c      	movs	r4, r3
 80002d8:	230f      	movs	r3, #15
 80002da:	4023      	ands	r3, r4
 80002dc:	3b08      	subs	r3, #8
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	430a      	orrs	r2, r1
 80002e2:	3306      	adds	r3, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18c3      	adds	r3, r0, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b003      	add	sp, #12
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	e000e100 	.word	0xe000e100
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2201      	movs	r2, #1
 800030a:	431a      	orrs	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	601a      	str	r2, [r3, #0]
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	b002      	add	sp, #8
 8000316:	bd80      	pop	{r7, pc}

08000318 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a03      	ldr	r2, [pc, #12]	; (8000334 <LL_I2C_EnableClockStretching+0x1c>)
 8000326:	401a      	ands	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	601a      	str	r2, [r3, #0]
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b002      	add	sp, #8
 8000332:	bd80      	pop	{r7, pc}
 8000334:	fffdffff 	.word	0xfffdffff

08000338 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a03      	ldr	r2, [pc, #12]	; (8000354 <LL_I2C_DisableGeneralCall+0x1c>)
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	601a      	str	r2, [r3, #0]
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b002      	add	sp, #8
 8000352:	bd80      	pop	{r7, pc}
 8000354:	fff7ffff 	.word	0xfff7ffff

08000358 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a05      	ldr	r2, [pc, #20]	; (8000380 <LL_I2C_SetOwnAddress2+0x28>)
 800036a:	401a      	ands	r2, r3
 800036c:	68b9      	ldr	r1, [r7, #8]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	430b      	orrs	r3, r1
 8000372:	431a      	orrs	r2, r3
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	60da      	str	r2, [r3, #12]
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b004      	add	sp, #16
 800037e:	bd80      	pop	{r7, pc}
 8000380:	fffff801 	.word	0xfffff801

08000384 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a03      	ldr	r2, [pc, #12]	; (80003a0 <LL_I2C_DisableOwnAddress2+0x1c>)
 8000392:	401a      	ands	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	60da      	str	r2, [r3, #12]
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b002      	add	sp, #8
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	ffff7fff 	.word	0xffff7fff

080003a4 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	2280      	movs	r2, #128	; 0x80
 80003b2:	0492      	lsls	r2, r2, #18
 80003b4:	431a      	orrs	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	605a      	str	r2, [r3, #4]
}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b002      	add	sp, #8
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <LL_I2C_SetSlaveAddr>:
  * @param  I2Cx I2C Instance.
  * @param  SlaveAddr This parameter must be a value between Min_Data=0x00 and Max_Data=0x3F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
 80003ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD, SlaveAddr);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	0a9b      	lsrs	r3, r3, #10
 80003d2:	029a      	lsls	r2, r3, #10
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	431a      	orrs	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	605a      	str	r2, [r3, #4]
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b002      	add	sp, #8
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	000a      	movs	r2, r1
 80003ee:	1cfb      	adds	r3, r7, #3
 80003f0:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80003f2:	1cfb      	adds	r3, r7, #3
 80003f4:	781a      	ldrb	r2, [r3, #0]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <LL_RCC_HSE_Enable+0x18>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <LL_RCC_HSE_Enable+0x18>)
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	0249      	lsls	r1, r1, #9
 8000412:	430a      	orrs	r2, r1
 8000414:	601a      	str	r2, [r3, #0]
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000

08000420 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <LL_RCC_HSE_IsReady+0x20>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	029b      	lsls	r3, r3, #10
 800042c:	4013      	ands	r3, r2
 800042e:	4a05      	ldr	r2, [pc, #20]	; (8000444 <LL_RCC_HSE_IsReady+0x24>)
 8000430:	4694      	mov	ip, r2
 8000432:	4463      	add	r3, ip
 8000434:	425a      	negs	r2, r3
 8000436:	4153      	adcs	r3, r2
 8000438:	b2db      	uxtb	r3, r3
}
 800043a:	0018      	movs	r0, r3
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	fffe0000 	.word	0xfffe0000

08000448 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <LL_RCC_HSI_Enable+0x18>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <LL_RCC_HSI_Enable+0x18>)
 8000452:	2101      	movs	r1, #1
 8000454:	430a      	orrs	r2, r1
 8000456:	601a      	str	r2, [r3, #0]
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	40021000 	.word	0x40021000

08000464 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <LL_RCC_HSI_IsReady+0x1c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2202      	movs	r2, #2
 800046e:	4013      	ands	r3, r2
 8000470:	3b02      	subs	r3, #2
 8000472:	425a      	negs	r2, r3
 8000474:	4153      	adcs	r3, r2
 8000476:	b2db      	uxtb	r3, r3
}
 8000478:	0018      	movs	r0, r3
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	40021000 	.word	0x40021000

08000484 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	22f8      	movs	r2, #248	; 0xf8
 8000492:	4393      	bics	r3, r2
 8000494:	0019      	movs	r1, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	00da      	lsls	r2, r3, #3
 800049a:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800049c:	430a      	orrs	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b002      	add	sp, #8
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40021000 	.word	0x40021000

080004ac <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <LL_RCC_SetSysClkSource+0x24>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	2203      	movs	r2, #3
 80004ba:	4393      	bics	r3, r2
 80004bc:	0019      	movs	r1, r3
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <LL_RCC_SetSysClkSource+0x24>)
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	430a      	orrs	r2, r1
 80004c4:	605a      	str	r2, [r3, #4]
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	40021000 	.word	0x40021000

080004d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <LL_RCC_GetSysClkSource+0x14>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	220c      	movs	r2, #12
 80004de:	4013      	ands	r3, r2
}
 80004e0:	0018      	movs	r0, r3
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_RCC_SetAHBPrescaler+0x24>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	22f0      	movs	r2, #240	; 0xf0
 80004fa:	4393      	bics	r3, r2
 80004fc:	0019      	movs	r1, r3
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <LL_RCC_SetAHBPrescaler+0x24>)
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	430a      	orrs	r2, r1
 8000504:	605a      	str	r2, [r3, #4]
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40021000 	.word	0x40021000

08000514 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LL_RCC_SetAPB1Prescaler+0x24>)
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000522:	4013      	ands	r3, r2
 8000524:	0019      	movs	r1, r3
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	430a      	orrs	r2, r1
 800052c:	605a      	str	r2, [r3, #4]
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40021000 	.word	0x40021000
 800053c:	fffff8ff 	.word	0xfffff8ff

08000540 <LL_RCC_SetI2CClockSource>:
  *         @arg @ref LL_RCC_I2C1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_I2C1_CLKSOURCE_SYSCLK
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C1SW, I2CxSource);
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <LL_RCC_SetI2CClockSource+0x24>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	2210      	movs	r2, #16
 800054e:	4393      	bics	r3, r2
 8000550:	0019      	movs	r1, r3
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <LL_RCC_SetI2CClockSource+0x24>)
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	430a      	orrs	r2, r1
 8000558:	631a      	str	r2, [r3, #48]	; 0x30
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40021000 	.word	0x40021000

08000568 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000572:	6959      	ldr	r1, [r3, #20]
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	430a      	orrs	r2, r1
 800057a:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <LL_AHB1_GRP1_EnableClock+0x28>)
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	4013      	ands	r3, r2
 8000584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b004      	add	sp, #16
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000

08000594 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <LL_APB1_GRP1_EnableClock+0x28>)
 800059e:	69d9      	ldr	r1, [r3, #28]
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_APB1_GRP1_EnableClock+0x28>)
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	430a      	orrs	r2, r1
 80005a6:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <LL_APB1_GRP1_EnableClock+0x28>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4013      	ands	r3, r2
 80005b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b004      	add	sp, #16
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <LL_APB1_GRP2_EnableClock+0x28>)
 80005ca:	6999      	ldr	r1, [r3, #24]
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <LL_APB1_GRP2_EnableClock+0x28>)
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <LL_APB1_GRP2_EnableClock+0x28>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b004      	add	sp, #16
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <LL_FLASH_SetLatency+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2201      	movs	r2, #1
 80005fa:	4393      	bics	r3, r2
 80005fc:	0019      	movs	r1, r3
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <LL_FLASH_SetLatency+0x24>)
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	430a      	orrs	r2, r1
 8000604:	601a      	str	r2, [r3, #0]
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40022000 	.word	0x40022000

08000614 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <LL_FLASH_GetLatency+0x14>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2201      	movs	r2, #1
 800061e:	4013      	ands	r3, r2
}
 8000620:	0018      	movs	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40022000 	.word	0x40022000

0800062c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2201      	movs	r2, #1
 800063a:	431a      	orrs	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b002      	add	sp, #8
 8000646:	bd80      	pop	{r7, pc}

08000648 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	4393      	bics	r3, r2
 8000658:	001a      	movs	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <LL_TIM_SetClockSource+0x24>)
 8000678:	401a      	ands	r2, r3
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	431a      	orrs	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	609a      	str	r2, [r3, #8]
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	ffffbff8 	.word	0xffffbff8

08000690 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2270      	movs	r2, #112	; 0x70
 80006a0:	4393      	bics	r3, r2
 80006a2:	001a      	movs	r2, r3
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	431a      	orrs	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	605a      	str	r2, [r3, #4]
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	4393      	bics	r3, r2
 80006c4:	001a      	movs	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	609a      	str	r2, [r3, #8]
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	619a      	str	r2, [r3, #24]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}

080006ea <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ff59 	bl	80005c0 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	055b      	lsls	r3, r3, #21
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff ff3e 	bl	8000594 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8000718:	2301      	movs	r3, #1
 800071a:	425b      	negs	r3, r3
 800071c:	2103      	movs	r1, #3
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff fd7e 	bl	8000220 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f8ae 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f000 f9b8 	bl	8000a9c <MX_GPIO_Init>
  MX_TIM1_Init();
 800072c:	f000 f974 	bl	8000a18 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000730:	f000 f8e4 	bl	80008fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  LL_I2C_SetSlaveAddr(I2C1, 0b0111100);
 8000734:	4b4f      	ldr	r3, [pc, #316]	; (8000874 <main+0x170>)
 8000736:	213c      	movs	r1, #60	; 0x3c
 8000738:	0018      	movs	r0, r3
 800073a:	f7ff fe42 	bl	80003c2 <LL_I2C_SetSlaveAddr>

  LL_I2C_TransmitData8(I2C1, 0xAE); // Set display OFF
 800073e:	4b4d      	ldr	r3, [pc, #308]	; (8000874 <main+0x170>)
 8000740:	21ae      	movs	r1, #174	; 0xae
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff fe4e 	bl	80003e4 <LL_I2C_TransmitData8>

  LL_I2C_TransmitData8(I2C1, 0xD5); // Set Display Clock Divide Ratio / OSC Frequency
 8000748:	4b4a      	ldr	r3, [pc, #296]	; (8000874 <main+0x170>)
 800074a:	21d5      	movs	r1, #213	; 0xd5
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff fe49 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0x80); // Display Clock Divide Ratio / OSC Frequency
 8000752:	4b48      	ldr	r3, [pc, #288]	; (8000874 <main+0x170>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff fe44 	bl	80003e4 <LL_I2C_TransmitData8>

  LL_I2C_TransmitData8(I2C1, 0xA8); // Set Multiplex Ratio
 800075c:	4b45      	ldr	r3, [pc, #276]	; (8000874 <main+0x170>)
 800075e:	21a8      	movs	r1, #168	; 0xa8
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff fe3f 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0x3F); // Multiplex Ratio for 128x64 (64-1)
 8000766:	4b43      	ldr	r3, [pc, #268]	; (8000874 <main+0x170>)
 8000768:	213f      	movs	r1, #63	; 0x3f
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff fe3a 	bl	80003e4 <LL_I2C_TransmitData8>

  LL_I2C_TransmitData8(I2C1, 0xD3); // Set Display Offset
 8000770:	4b40      	ldr	r3, [pc, #256]	; (8000874 <main+0x170>)
 8000772:	21d3      	movs	r1, #211	; 0xd3
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff fe35 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0x00); // Display Offset
 800077a:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <main+0x170>)
 800077c:	2100      	movs	r1, #0
 800077e:	0018      	movs	r0, r3
 8000780:	f7ff fe30 	bl	80003e4 <LL_I2C_TransmitData8>

  LL_I2C_TransmitData8(I2C1, 0xA3); // Set Display Start Line
 8000784:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <main+0x170>)
 8000786:	21a3      	movs	r1, #163	; 0xa3
 8000788:	0018      	movs	r0, r3
 800078a:	f7ff fe2b 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0x00); // Set Display Start Line
 800078e:	4b39      	ldr	r3, [pc, #228]	; (8000874 <main+0x170>)
 8000790:	2100      	movs	r1, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f7ff fe26 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0x40); // Set Display Start Line
 8000798:	4b36      	ldr	r3, [pc, #216]	; (8000874 <main+0x170>)
 800079a:	2140      	movs	r1, #64	; 0x40
 800079c:	0018      	movs	r0, r3
 800079e:	f7ff fe21 	bl	80003e4 <LL_I2C_TransmitData8>


  LL_I2C_TransmitData8(I2C1, 0x8D); // Set Charge Pump
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <main+0x170>)
 80007a4:	218d      	movs	r1, #141	; 0x8d
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff fe1c 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0x14); // Charge Pump (0x10 External, 0x14 Internal DC/DC)
 80007ac:	4b31      	ldr	r3, [pc, #196]	; (8000874 <main+0x170>)
 80007ae:	2114      	movs	r1, #20
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fe17 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0xAF);
 80007b6:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <main+0x170>)
 80007b8:	21af      	movs	r1, #175	; 0xaf
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff fe12 	bl	80003e4 <LL_I2C_TransmitData8>

  LL_I2C_TransmitData8(I2C1, 0xA0); // Set Segment Re-Map
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <main+0x170>)
 80007c2:	21a0      	movs	r1, #160	; 0xa0
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff fe0d 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0xC0); // Set Com Output Scan Direction
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <main+0x170>)
 80007cc:	21c0      	movs	r1, #192	; 0xc0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fe08 	bl	80003e4 <LL_I2C_TransmitData8>

  LL_I2C_TransmitData8(I2C1, 0xDA); // Set COM Hardware Configuration
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <main+0x170>)
 80007d6:	21da      	movs	r1, #218	; 0xda
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff fe03 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0x12); // COM Hardware Configuration
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <main+0x170>)
 80007e0:	2112      	movs	r1, #18
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fdfe 	bl	80003e4 <LL_I2C_TransmitData8>

  LL_I2C_TransmitData8(I2C1, 0x81); // Set Contrast
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <main+0x170>)
 80007ea:	2181      	movs	r1, #129	; 0x81
 80007ec:	0018      	movs	r0, r3
 80007ee:	f7ff fdf9 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0x7F); // Contrast
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <main+0x170>)
 80007f4:	217f      	movs	r1, #127	; 0x7f
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff fdf4 	bl	80003e4 <LL_I2C_TransmitData8>

  LL_I2C_TransmitData8(I2C1, 0xD9); // Set Pre-Charge Period
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <main+0x170>)
 80007fe:	21d9      	movs	r1, #217	; 0xd9
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fdef 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0x22); // Set Pre-Charge Period (0x22 External, 0xF1 Internal)
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <main+0x170>)
 8000808:	2122      	movs	r1, #34	; 0x22
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff fdea 	bl	80003e4 <LL_I2C_TransmitData8>

  LL_I2C_TransmitData8(I2C1, 0xDB); // Set VCOMH Deselect Level
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <main+0x170>)
 8000812:	21db      	movs	r1, #219	; 0xdb
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff fde5 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0x20); // VCOMH Deselect Level
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <main+0x170>)
 800081c:	2120      	movs	r1, #32
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff fde0 	bl	80003e4 <LL_I2C_TransmitData8>

  //LL_I2C_TransmitData8(I2C1, 0xA5); // Set all pixels ON
  LL_I2C_TransmitData8(I2C1, 0xA6); // Set display not inverted
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <main+0x170>)
 8000826:	21a6      	movs	r1, #166	; 0xa6
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff fddb 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0xAF); // Set display On
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <main+0x170>)
 8000830:	21af      	movs	r1, #175	; 0xaf
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff fdd6 	bl	80003e4 <LL_I2C_TransmitData8>
  LL_I2C_TransmitData8(I2C1, 0xA5); // Set all pixels ON
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <main+0x170>)
 800083a:	21a5      	movs	r1, #165	; 0xa5
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff fdd1 	bl	80003e4 <LL_I2C_TransmitData8>
  while (1)
  {
    /* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	 if(TIM1->CNT % 650000 <= 32500){
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <main+0x174>)
 8000844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000846:	490d      	ldr	r1, [pc, #52]	; (800087c <main+0x178>)
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff fce3 	bl	8000214 <__aeabi_uidivmod>
 800084e:	000b      	movs	r3, r1
 8000850:	001a      	movs	r2, r3
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <main+0x17c>)
 8000854:	429a      	cmp	r2, r3
 8000856:	d806      	bhi.n	8000866 <main+0x162>
		 LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000858:	2390      	movs	r3, #144	; 0x90
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	2110      	movs	r1, #16
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff ff43 	bl	80006ea <LL_GPIO_ResetOutputPin>
 8000864:	e7ed      	b.n	8000842 <main+0x13e>
	 }else{
		 LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000866:	2390      	movs	r3, #144	; 0x90
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2110      	movs	r1, #16
 800086c:	0018      	movs	r0, r3
 800086e:	f7ff ff30 	bl	80006d2 <LL_GPIO_SetOutputPin>
	 if(TIM1->CNT % 650000 <= 32500){
 8000872:	e7e6      	b.n	8000842 <main+0x13e>
 8000874:	40005400 	.word	0x40005400
 8000878:	40012c00 	.word	0x40012c00
 800087c:	0009eb10 	.word	0x0009eb10
 8000880:	00007ef4 	.word	0x00007ef4

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff feaf 	bl	80005ec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	f7ff fec0 	bl	8000614 <LL_FLASH_GetLatency>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d1fb      	bne.n	8000890 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000898:	f7ff fdb4 	bl	8000404 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	f7ff fdbf 	bl	8000420 <LL_RCC_HSE_IsReady>
 80008a2:	0003      	movs	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d1fa      	bne.n	800089e <SystemClock_Config+0x1a>
  {

  }
  LL_RCC_HSI_Enable();
 80008a8:	f7ff fdce 	bl	8000448 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	f7ff fdd9 	bl	8000464 <LL_RCC_HSI_IsReady>
 80008b2:	0003      	movs	r3, r0
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d1fa      	bne.n	80008ae <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80008b8:	2010      	movs	r0, #16
 80008ba:	f7ff fde3 	bl	8000484 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_512);
 80008be:	20f0      	movs	r0, #240	; 0xf0
 80008c0:	f7ff fe14 	bl	80004ec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fe25 	bl	8000514 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff fdee 	bl	80004ac <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	f7ff fdff 	bl	80004d4 <LL_RCC_GetSysClkSource>
 80008d6:	0003      	movs	r3, r0
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d1fa      	bne.n	80008d2 <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(15625);
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <SystemClock_Config+0x74>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fc04 	bl	80010ec <LL_Init1msTick>
  LL_SetSystemCoreClock(15625);
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <SystemClock_Config+0x74>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fc10 	bl	800110c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff fe27 	bl	8000540 <LL_RCC_SetI2CClockSource>
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00003d09 	.word	0x00003d09

080008fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b08f      	sub	sp, #60	; 0x3c
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000902:	241c      	movs	r4, #28
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	231c      	movs	r3, #28
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f000 fc0b 	bl	8001128 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	0018      	movs	r0, r3
 8000916:	2318      	movs	r3, #24
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f000 fc04 	bl	8001128 <memset>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	029b      	lsls	r3, r3, #10
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff fe1f 	bl	8000568 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PA9   ------> I2C1_SCL
  PA10   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2202      	movs	r2, #2
 8000936:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2203      	movs	r2, #3
 800093c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2201      	movs	r2, #1
 8000948:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2204      	movs	r2, #4
 800094e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	1d3a      	adds	r2, r7, #4
 8000952:	2390      	movs	r3, #144	; 0x90
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f000 f9cf 	bl	8000cfc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	00d2      	lsls	r2, r2, #3
 8000964:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2202      	movs	r2, #2
 800096a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2203      	movs	r2, #3
 8000970:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2201      	movs	r2, #1
 8000976:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2201      	movs	r2, #1
 800097c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2204      	movs	r2, #4
 8000982:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	1d3a      	adds	r2, r7, #4
 8000986:	2390      	movs	r3, #144	; 0x90
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f000 f9b5 	bl	8000cfc <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	039b      	lsls	r3, r3, #14
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff fdfc 	bl	8000594 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_I2C1_Init+0x114>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff fcf0 	bl	8000384 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_I2C1_Init+0x114>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff fcc6 	bl	8000338 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_I2C1_Init+0x114>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff fcb2 	bl	8000318 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80009b4:	0021      	movs	r1, r4
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0xF000F3FF;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <MX_I2C1_Init+0x118>)
 80009c0:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = 0;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <MX_I2C1_Init+0x114>)
 80009e4:	0019      	movs	r1, r3
 80009e6:	0010      	movs	r0, r2
 80009e8:	f000 fa82 	bl	8000ef0 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C1);
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_I2C1_Init+0x114>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff fcd8 	bl	80003a4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_I2C1_Init+0x114>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fcac 	bl	8000358 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <MX_I2C1_Init+0x114>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff fc7a 	bl	80002fc <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b00f      	add	sp, #60	; 0x3c
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	40005400 	.word	0x40005400
 8000a14:	f000f3ff 	.word	0xf000f3ff

08000a18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	0018      	movs	r0, r3
 8000a22:	2314      	movs	r3, #20
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f000 fb7e 	bl	8001128 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM1);
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff fdc5 	bl	80005c0 <LL_APB1_GRP2_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <MX_TIM1_Init+0x7c>)
 8000a46:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <MX_TIM1_Init+0x80>)
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0010      	movs	r0, r2
 8000a5c:	f000 fabe 	bl	8000fdc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_TIM1_Init+0x80>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fdf0 	bl	8000648 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_TIM1_Init+0x80>)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff fdfb 	bl	8000668 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_TIM1_Init+0x80>)
 8000a74:	2100      	movs	r1, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff fe0a 	bl	8000690 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_TIM1_Init+0x80>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fe18 	bl	80006b4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableCounter(TIM1);
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <MX_TIM1_Init+0x80>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fdd0 	bl	800062c <LL_TIM_EnableCounter>
  /* USER CODE END TIM1_Init 2 */

}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b006      	add	sp, #24
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	0000ffff 	.word	0x0000ffff
 8000a98:	40012c00 	.word	0x40012c00

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	2318      	movs	r3, #24
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f000 fb3c 	bl	8001128 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	03db      	lsls	r3, r3, #15
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fd57 	bl	8000568 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	029b      	lsls	r3, r3, #10
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f7ff fd52 	bl	8000568 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000ac4:	2390      	movs	r3, #144	; 0x90
 8000ac6:	05db      	lsls	r3, r3, #23
 8000ac8:	2110      	movs	r1, #16
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fe0d 	bl	80006ea <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000ad0:	003b      	movs	r3, r7
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	2201      	movs	r2, #1
 8000ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000adc:	003b      	movs	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ae8:	003b      	movs	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	003a      	movs	r2, r7
 8000af0:	2390      	movs	r3, #144	; 0x90
 8000af2:	05db      	lsls	r3, r3, #23
 8000af4:	0011      	movs	r1, r2
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f900 	bl	8000cfc <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b006      	add	sp, #24
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b3c:	f7ff fff7 	bl	8000b2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	; (8000b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <LoopForever+0xe>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	; (8000b84 <LoopForever+0x16>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b66:	f000 fae7 	bl	8001138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6a:	f7ff fdcb 	bl	8000704 <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   r0, =_estack
 8000b70:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b7c:	080011a0 	.word	0x080011a0
  ldr r2, =_sbss
 8000b80:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b84:	20000020 	.word	0x20000020

08000b88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_IRQHandler>

08000b8a <LL_GPIO_SetPinMode>:
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6819      	ldr	r1, [r3, #0]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	435b      	muls	r3, r3
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	189b      	adds	r3, r3, r2
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	400b      	ands	r3, r1
 8000baa:	001a      	movs	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	435b      	muls	r3, r3
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	434b      	muls	r3, r1
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b004      	add	sp, #16
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <LL_GPIO_SetPinOutputType>:
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	43d2      	mvns	r2, r2
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	434b      	muls	r3, r1
 8000bde:	431a      	orrs	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	605a      	str	r2, [r3, #4]
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b004      	add	sp, #16
 8000bea:	bd80      	pop	{r7, pc}

08000bec <LL_GPIO_SetPinSpeed>:
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6899      	ldr	r1, [r3, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	435b      	muls	r3, r3
 8000c00:	001a      	movs	r2, r3
 8000c02:	0013      	movs	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	189b      	adds	r3, r3, r2
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	435b      	muls	r3, r3
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	434b      	muls	r3, r1
 8000c16:	431a      	orrs	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	609a      	str	r2, [r3, #8]
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b004      	add	sp, #16
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <LL_GPIO_SetPinPull>:
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68d9      	ldr	r1, [r3, #12]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	435b      	muls	r3, r3
 8000c38:	001a      	movs	r2, r3
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	189b      	adds	r3, r3, r2
 8000c40:	43db      	mvns	r3, r3
 8000c42:	400b      	ands	r3, r1
 8000c44:	001a      	movs	r2, r3
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	435b      	muls	r3, r3
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	434b      	muls	r3, r1
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	60da      	str	r2, [r3, #12]
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b004      	add	sp, #16
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <LL_GPIO_SetAFPin_0_7>:
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6a19      	ldr	r1, [r3, #32]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	435b      	muls	r3, r3
 8000c70:	68ba      	ldr	r2, [r7, #8]
 8000c72:	4353      	muls	r3, r2
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	435a      	muls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	1a9b      	subs	r3, r3, r2
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	400b      	ands	r3, r1
 8000c82:	001a      	movs	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	435b      	muls	r3, r3
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	434b      	muls	r3, r1
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	434b      	muls	r3, r1
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	434b      	muls	r3, r1
 8000c94:	431a      	orrs	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	621a      	str	r2, [r3, #32]
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b004      	add	sp, #16
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <LL_GPIO_SetAFPin_8_15>:
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b084      	sub	sp, #16
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	0a12      	lsrs	r2, r2, #8
 8000cba:	4353      	muls	r3, r2
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	0a12      	lsrs	r2, r2, #8
 8000cc0:	4353      	muls	r3, r2
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	0a12      	lsrs	r2, r2, #8
 8000cc6:	435a      	muls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	0a1b      	lsrs	r3, r3, #8
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	0a09      	lsrs	r1, r1, #8
 8000cdc:	434b      	muls	r3, r1
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	0a09      	lsrs	r1, r1, #8
 8000ce2:	434b      	muls	r3, r1
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	0a09      	lsrs	r1, r1, #8
 8000ce8:	434b      	muls	r3, r1
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	434b      	muls	r3, r1
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b004      	add	sp, #16
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000d0a:	e048      	b.n	8000d9e <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d03a      	beq.n	8000d98 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d003      	beq.n	8000d32 <LL_GPIO_Init+0x36>
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d10e      	bne.n	8000d50 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff ff56 	bl	8000bec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff ff39 	bl	8000bc2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff ff63 	bl	8000c24 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d111      	bne.n	8000d8a <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2bff      	cmp	r3, #255	; 0xff
 8000d6a:	d807      	bhi.n	8000d7c <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	695a      	ldr	r2, [r3, #20]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff ff71 	bl	8000c5c <LL_GPIO_SetAFPin_0_7>
 8000d7a:	e006      	b.n	8000d8a <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff ff8c 	bl	8000ca2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	0018      	movs	r0, r3
 8000d94:	f7ff fef9 	bl	8000b8a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	40da      	lsrs	r2, r3
 8000da6:	1e13      	subs	r3, r2, #0
 8000da8:	d1b0      	bne.n	8000d0c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b004      	add	sp, #16
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <LL_I2C_Enable>:
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b002      	add	sp, #8
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <LL_I2C_Disable>:
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4393      	bics	r3, r2
 8000de0:	001a      	movs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	601a      	str	r2, [r3, #0]
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <LL_I2C_ConfigFilters>:
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <LL_I2C_ConfigFilters+0x2c>)
 8000e02:	401a      	ands	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	0219      	lsls	r1, r3, #8
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	601a      	str	r2, [r3, #0]
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b004      	add	sp, #16
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	ffffe0ff 	.word	0xffffe0ff

08000e20 <LL_I2C_SetOwnAddress1>:
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	0adb      	lsrs	r3, r3, #11
 8000e32:	02da      	lsls	r2, r3, #11
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	430b      	orrs	r3, r1
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	609a      	str	r2, [r3, #8]
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b004      	add	sp, #16
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <LL_I2C_EnableOwnAddress1>:
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	0212      	lsls	r2, r2, #8
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <LL_I2C_DisableOwnAddress1>:
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <LL_I2C_DisableOwnAddress1+0x1c>)
 8000e76:	401a      	ands	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	ffff7fff 	.word	0xffff7fff

08000e88 <LL_I2C_SetTiming>:
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	611a      	str	r2, [r3, #16]
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <LL_I2C_SetMode>:
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <LL_I2C_SetMode+0x24>)
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	431a      	orrs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	601a      	str	r2, [r3, #0]
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	ffcfffff 	.word	0xffcfffff

08000ec8 <LL_I2C_AcknowledgeNextData>:
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <LL_I2C_AcknowledgeNextData+0x24>)
 8000ed8:	401a      	ands	r2, r3
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	ffff7fff 	.word	0xffff7fff

08000ef0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff ff67 	bl	8000dd0 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	6899      	ldr	r1, [r3, #8]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff ff6f 	bl	8000df0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	0011      	movs	r1, r2
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f7ff ffb4 	bl	8000e88 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff ff46 	bl	8000db4 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff ff9c 	bl	8000e68 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	6919      	ldr	r1, [r3, #16]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	699a      	ldr	r2, [r3, #24]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff ff70 	bl	8000e20 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff ff7c 	bl	8000e48 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff ffa1 	bl	8000ea0 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	0011      	movs	r1, r2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff ffae 	bl	8000ec8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LL_TIM_SetPrescaler>:
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <LL_TIM_SetAutoReload>:
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <LL_TIM_SetRepetitionCounter>:
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	615a      	str	r2, [r3, #20]
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a2c      	ldr	r2, [pc, #176]	; (80010a0 <LL_TIM_Init+0xc4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d003      	beq.n	8000ffc <LL_TIM_Init+0x20>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a2b      	ldr	r2, [pc, #172]	; (80010a4 <LL_TIM_Init+0xc8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d107      	bne.n	800100c <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2270      	movs	r2, #112	; 0x70
 8001000:	4393      	bics	r3, r2
 8001002:	001a      	movs	r2, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4313      	orrs	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <LL_TIM_Init+0xc4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00f      	beq.n	8001034 <LL_TIM_Init+0x58>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <LL_TIM_Init+0xc8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d00b      	beq.n	8001034 <LL_TIM_Init+0x58>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <LL_TIM_Init+0xcc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d007      	beq.n	8001034 <LL_TIM_Init+0x58>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a21      	ldr	r2, [pc, #132]	; (80010ac <LL_TIM_Init+0xd0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d003      	beq.n	8001034 <LL_TIM_Init+0x58>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a20      	ldr	r2, [pc, #128]	; (80010b0 <LL_TIM_Init+0xd4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d106      	bne.n	8001042 <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <LL_TIM_Init+0xd8>)
 8001038:	401a      	ands	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	4313      	orrs	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0011      	movs	r1, r2
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff ff9c 	bl	8000f8e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	001a      	movs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ff88 	bl	8000f76 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <LL_TIM_Init+0xc4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <LL_TIM_Init+0xa2>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <LL_TIM_Init+0xd0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d003      	beq.n	800107e <LL_TIM_Init+0xa2>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LL_TIM_Init+0xd4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d106      	bne.n	800108c <LL_TIM_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0011      	movs	r1, r2
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff ff8d 	bl	8000fa6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff ff95 	bl	8000fbe <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001094:	2300      	movs	r3, #0
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40012c00 	.word	0x40012c00
 80010a4:	40000400 	.word	0x40000400
 80010a8:	40002000 	.word	0x40002000
 80010ac:	40014400 	.word	0x40014400
 80010b0:	40014800 	.word	0x40014800
 80010b4:	fffffcff 	.word	0xfffffcff

080010b8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff f81f 	bl	8000108 <__udivsi3>
 80010ca:	0003      	movs	r3, r0
 80010cc:	001a      	movs	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <LL_InitTick+0x30>)
 80010d0:	3a01      	subs	r2, #1
 80010d2:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <LL_InitTick+0x30>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <LL_InitTick+0x30>)
 80010dc:	2205      	movs	r2, #5
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	e000e010 	.word	0xe000e010

080010ec <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80010f4:	23fa      	movs	r3, #250	; 0xfa
 80010f6:	009a      	lsls	r2, r3, #2
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	0011      	movs	r1, r2
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff ffdb 	bl	80010b8 <LL_InitTick>
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <LL_SetSystemCoreClock+0x18>)
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	20000000 	.word	0x20000000

08001128 <memset>:
 8001128:	0003      	movs	r3, r0
 800112a:	1882      	adds	r2, r0, r2
 800112c:	4293      	cmp	r3, r2
 800112e:	d100      	bne.n	8001132 <memset+0xa>
 8001130:	4770      	bx	lr
 8001132:	7019      	strb	r1, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	e7f9      	b.n	800112c <memset+0x4>

08001138 <__libc_init_array>:
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	2600      	movs	r6, #0
 800113c:	4c0c      	ldr	r4, [pc, #48]	; (8001170 <__libc_init_array+0x38>)
 800113e:	4d0d      	ldr	r5, [pc, #52]	; (8001174 <__libc_init_array+0x3c>)
 8001140:	1b64      	subs	r4, r4, r5
 8001142:	10a4      	asrs	r4, r4, #2
 8001144:	42a6      	cmp	r6, r4
 8001146:	d109      	bne.n	800115c <__libc_init_array+0x24>
 8001148:	2600      	movs	r6, #0
 800114a:	f000 f819 	bl	8001180 <_init>
 800114e:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <__libc_init_array+0x40>)
 8001150:	4d0a      	ldr	r5, [pc, #40]	; (800117c <__libc_init_array+0x44>)
 8001152:	1b64      	subs	r4, r4, r5
 8001154:	10a4      	asrs	r4, r4, #2
 8001156:	42a6      	cmp	r6, r4
 8001158:	d105      	bne.n	8001166 <__libc_init_array+0x2e>
 800115a:	bd70      	pop	{r4, r5, r6, pc}
 800115c:	00b3      	lsls	r3, r6, #2
 800115e:	58eb      	ldr	r3, [r5, r3]
 8001160:	4798      	blx	r3
 8001162:	3601      	adds	r6, #1
 8001164:	e7ee      	b.n	8001144 <__libc_init_array+0xc>
 8001166:	00b3      	lsls	r3, r6, #2
 8001168:	58eb      	ldr	r3, [r5, r3]
 800116a:	4798      	blx	r3
 800116c:	3601      	adds	r6, #1
 800116e:	e7f2      	b.n	8001156 <__libc_init_array+0x1e>
 8001170:	08001198 	.word	0x08001198
 8001174:	08001198 	.word	0x08001198
 8001178:	0800119c 	.word	0x0800119c
 800117c:	08001198 	.word	0x08001198

08001180 <_init>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001186:	bc08      	pop	{r3}
 8001188:	469e      	mov	lr, r3
 800118a:	4770      	bx	lr

0800118c <_fini>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001192:	bc08      	pop	{r3}
 8001194:	469e      	mov	lr, r3
 8001196:	4770      	bx	lr
